-- Handle key presses
-- Thomas Parslow (PatRat)
-- patrat@rat-software.com

-- --------------------------------------------------------------------------
--
-- License
--
-- The contents of this file are subject to the Jabber Open Source License
-- Version 1.0 (the "License").  You may not copy or use this file, in either
-- source code or executable form, except in compliance with the License.  You
-- may obtain a copy of the License at http://www.jabber.com/license/ or at
-- http://www.opensource.org/.  
--
-- Software distributed under the License is distributed on an "AS IS" basis,
-- WITHOUT WARRANTY OF ANY KIND, either express or implied.  See the License
-- for the specific language governing rights and limitations under the
-- License.
--
-- Copyrights
-- 
-- Copyright (c) Thomas Parslow 2001 unless otherwise stated
-- 
-- --------------------------------------------------------------------------


constant USER32 = open_dll("user32.dll")
constant dllGetForegroundWindow = define_c_func(USER32,"GetForegroundWindow",{},C_ULONG)

--Sequence of {hwnd, routine id,data} pairs.
sequence KeyDown
KeyDown = {}
sequence KeyPress
KeyPress = {}

--Registers a routine to have all key downs for WinID sent to it. If WinID is 0 then all key downs will be sent to the routine
--Handler routine will be passed that following arguments: {Data,keycode,shift}
--Data can be any value, it is passed back unchanged with each keypress
global procedure keys_OnKeyDown(integer WinID, integer RoutineID, object Data)
    if WinID != 0 then WinID = getHandle(WinID) end if
    KeyDown = append(KeyDown,{WinID,RoutineID,Data})  
end procedure

global procedure keys_OnKeyPress(integer WinID, integer RoutineID, object Data)
    if WinID != 0 then WinID = getHandle(WinID) end if
    KeyPress = append(KeyPress,{WinID,RoutineID,Data})  
end procedure

procedure GlobalOnEvent( integer event, atom wParam, atom lParam)
    integer KeyCode,Shift
    atom hwnd
    
    if event = WM_SYSKEYDOWN or event = WM_KEYDOWN then
        KeyCode = wParam
        Shift = (and_bits(#80, w32Func( xGetKeyState, {VK_SHIFT} ))!=0) * ShiftMask +
                (and_bits(#80, w32Func( xGetKeyState, {VK_CONTROL} ))!=0) * ControlMask +
                (and_bits(#80, w32Func( xGetKeyState, {VK_MENU} ))!=0) * AltMask
    
        hwnd = c_func(dllGetForegroundWindow,{})
        for i = 1 to length(KeyDown) do
            if KeyDown[i][1] = 0 or KeyDown[i][1] = hwnd then
                call_proc(KeyDown[i][2],{KeyDown[i][3],KeyCode,Shift})
            end if
        end for
    end if
end procedure

procedure GlobalKeyPress(integer KeyCode, integer Shift)
    atom hwnd
    hwnd = c_func(dllGetForegroundWindow,{})
    for i = 1 to length(KeyPress) do
        if KeyPress[i][1] = 0 or KeyPress[i][1] = hwnd then
            call_proc(KeyPress[i][2],{KeyPress[i][3],KeyCode,Shift})
        end if
    end for
end procedure

onEvent[Screen] = routine_id("GlobalOnEvent")
onKeyPress[Screen] = routine_id("GlobalKeyPress")